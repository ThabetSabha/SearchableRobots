{"version":3,"sources":["serviceWorker.js","components/Card/Card.tsx","components/CardList/CardList.tsx","components/SearchBox/Searchbox.tsx","containers/App.tsx","redux/actions.tsx","redux/constants.tsx","redux/reducers.tsx","redux/store.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","id","name","email","className","style","minWidth","alt","src","CardList","robots","map","user","key","Searchbox","searchChange","type","placeholder","aria-label","onChange","App","dispatch","useDispatch","useEffect","fetch","response","json","data","payload","err","message","searchField","useSelector","searchRobots","requestRobotsReducer","isPending","filtered","filter","robot","toLowerCase","includes","event","element","target","value","overflowY","height","border","intialStateSearch","intialStateRobotsFetch","rootReducer","combineReducers","action","middlewares","createLogger","thunk","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6PAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,UC9ElDC,EAhBF,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,MACxB,OACE,yBACEC,UAAU,sDACVC,MAAO,CAAEC,SAAU,UAEnB,yBAAKC,IAAI,SAASC,IAAG,+BAA0BP,EAA1B,mBACrB,6BACG,IACD,gCAAMC,EAAN,KACA,+BAAKC,EAAL,QCQOM,EAjBE,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,OAClB,OACE,oCACGA,EAAOC,KAAI,SAACC,GACX,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAKX,GACVA,GAAIW,EAAKX,GACTC,KAAMU,EAAKV,KACXC,MAAOS,EAAKT,aCITW,EAdG,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,aACnB,OACE,oCACE,2BACEX,UAAU,2DACVY,KAAK,SACLC,YAAY,gBACZC,aAAW,gBACXC,SAAUJ,MC4CHK,G,MA/CH,WACV,IAAMC,EAAWC,cAEjBC,qBAAU,WACRF,GCE0C,SAACA,GAC7CA,EAAS,CAAEL,KCbiC,2BDc5CQ,MAAM,8CACHtC,MAAK,SAACuC,GAAD,OAAcA,EAASC,UAC5BxC,MAAK,SAACyC,GAAD,OAAUN,EAAS,CAAEL,KCfe,yBDeeY,QAASD,OACjE7B,OAAM,SAAC+B,GAAD,OACLR,EAAS,CAAEL,KChB4B,wBDgBCY,QAASC,EAAIC,kBDPtD,CAACT,IAEJ,IAKMU,EAAcC,aAClB,SAACxC,GAAD,OAA2BA,EAAMyC,aAAaF,eAE1CrB,EAASsB,aACb,SAACxC,GAAD,OAA2BA,EAAM0C,qBAAqBxB,UAElDyB,EAAYH,aAChB,SAACxC,GAAD,OAA2BA,EAAM0C,qBAAqBC,aAGlDC,EAAW1B,EAAO2B,QAAO,SAACC,GAC9B,OAAOA,EAAMpC,KAAKqC,cAAcC,SAAST,EAAYQ,kBAGvD,OACE,yBAAKnC,UAAU,WACb,wBAAIA,UAAU,WAAd,eACA,kBAAC,EAAD,CAAWW,aAtBQ,SAAC0B,GACtB,IAAMC,EAAUD,EAAME,OACtBtB,ECRiE,CACnEL,KCTyC,sBDUzCY,QDM0Bc,EAAQE,WAqB9B,yBACEvC,MAAO,CACLwC,UAAW,SACXC,OAAQ,QACRC,OAAQ,mBAGTZ,EACC,wBAAI/B,UAAU,WAAd,aAEA,kBAAC,EAAD,CAAUM,OAAQ0B,Q,cGxCtBY,EAAkC,CACtCjB,YAAa,IAeTkB,EAA4C,CAChDd,WAAW,EACXzB,OAAQ,GACRX,MAAO,I,gBChBHmD,EAAcC,YAAgB,CAAElB,aDCV,WAGtB,IAFJzC,EAEG,uDAFmBwD,EACtBI,EACG,uCACH,OAAQA,EAAOpC,MACb,IDhBuC,sBCiBrC,OAAO,2BAAKxB,GAAZ,IAAmBuC,YAAaqB,EAAOxB,UACzC,QACE,OAAOpC,ICTuC0C,qBDmBhB,WAG9B,IAFJ1C,EAEG,uDAFKyD,EACRG,EACG,uCACH,OAAQA,EAAOpC,MACb,IDjC0C,yBCkCxC,OAAO,2BAAKxB,GAAZ,IAAmB2C,WAAW,IAChC,IDlC0C,yBCmCxC,OAAO,2BAAK3C,GAAZ,IAAmBkB,OAAQ0C,EAAOxB,QAASO,WAAW,IAExD,IDpCyC,wBCqCvC,OAAO,2BAAK3C,GAAZ,IAAmBO,MAAOqD,EAAOxB,QAASO,WAAW,IAEvD,QACE,OAAO3C,MC/BP6D,GADSC,yBACwB,CAACC,MAKxC,IAEeC,EAFDC,YAAYP,EAAaQ,IAAe,WAAf,EAAmBL,ICP1DM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,STMnB,SAAkBjF,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiF,IAAIC,oBAAwBzF,OAAOC,SAASyF,MACpDC,SAAW3F,OAAOC,SAAS0F,OAIvC,OAGF3F,OAAO4F,iBAAiB,QAAQ,WAC9B,IAAMvF,EAAK,UAAMoF,oBAAN,sBAEP3F,IAgEV,SAAiCO,EAAOC,GAEtC0C,MAAM3C,EAAO,CACXwF,QAAS,CAAE,iBAAkB,YAE5BnF,MAAK,SAAAuC,GAEJ,IAAM6C,EAAc7C,EAAS4C,QAAQE,IAAI,gBAEnB,MAApB9C,EAAS+C,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1F,UAAUC,cAAc0F,MAAMxF,MAAK,SAAAC,GACjCA,EAAawF,aAAazF,MAAK,WAC7BV,OAAOC,SAASmG,eAKpBhG,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAkF,CAAwBhG,EAAOC,GAI/BC,UAAUC,cAAc0F,MAAMxF,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OS5B/BE,K","file":"static/js/main.4d347d7a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nconst Card = ({ id, name, email }: CardProps) => {\n  return (\n    <div\n      className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\"\n      style={{ minWidth: \"350px\" }}\n    >\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`}></img>\n      <div>\n        {\" \"}\n        <h2> {name} </h2>\n        <p> {email} </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../Card/Card\";\n\nconst CardList = ({ robots }: CardListProps) => {\n  return (\n    <>\n      {robots.map((user) => {\n        return (\n          <Card\n            key={user.id}\n            id={user.id}\n            name={user.name}\n            email={user.email}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Searchbox = ({ searchChange }: SearchBoxProps) => {\n  return (\n    <>\n      <input\n        className=\"pa3 ma4 ba b--green bg-lightest-blue robots-search-input\"\n        type=\"search\"\n        placeholder=\"Search Robots\"\n        aria-label=\"search Robots\"\n        onChange={searchChange}\n      ></input>\n    </>\n  );\n};\n\nexport default Searchbox;\n","import React, { useEffect } from \"react\";\nimport CardList from \"../components/CardList/CardList\";\nimport Searchbox from \"../components/SearchBox/Searchbox\";\nimport \"./App.css\";\nimport { RootStateOrAny, useDispatch, useSelector } from \"react-redux\";\nimport { requestRobotsAction, setSearchField } from \"../redux/actions\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(requestRobotsAction());\n  }, [dispatch]);\n\n  const onSearchChange = (event: React.SyntheticEvent): void => {\n    const element = event.target as HTMLInputElement;\n    dispatch(setSearchField(element.value));\n  };\n\n  const searchField = useSelector(\n    (state: RootStateOrAny) => state.searchRobots.searchField\n  );\n  const robots = useSelector(\n    (state: RootStateOrAny) => state.requestRobotsReducer.robots\n  );\n  const isPending = useSelector(\n    (state: RootStateOrAny) => state.requestRobotsReducer.isPending\n  );\n\n  const filtered = robots.filter((robot: IRobot) => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return (\n    <div className=\"tc main\">\n      <h1 className=\"ma2 f1 \">RoboFriends</h1>\n      <Searchbox searchChange={onSearchChange} />\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"500px\",\n          border: \"2px solid grey\",\n        }}\n      >\n        {isPending ? (\n          <h1 className=\"ma2 f1 \">Loading..</h1>\n        ) : (\n          <CardList robots={filtered} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { Dispatch } from \"redux\";\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text: string): ISearchFieldAction => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobotsAction = (): any => (dispatch: Dispatch): void => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((err) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err.message })\n    );\n};\n","export const CHANGE_SEARCH_FIELD: string = \"CHANGE_SEARCH_FIELD\";\nexport const REQUEST_ROBOTS_PENDING: string = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS: string = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED: string = \"REQUEST_ROBOTS_FAILED\";\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst intialStateSearch: ISearchState = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (\n  state: ISearchState = intialStateSearch,\n  action: ISearchFieldAction\n) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst intialStateRobotsFetch: IFetchRobotsState = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobotsReducer = (\n  state = intialStateRobotsFetch,\n  action: IRequestRobotsAction\n) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n\n    default:\n      return state; //returns initalStateRobotsFetch to the store.\n  }\n};\n","import {\n  createStore,\n  applyMiddleware,\n  combineReducers,\n  Middleware,\n} from \"redux\";\nimport { searchRobots, requestRobotsReducer } from \"./reducers\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nconst rootReducer = combineReducers({ searchRobots, requestRobotsReducer });\nconst logger = createLogger();\nconst middlewares: Array<Middleware> = [thunk];\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport App from \"./containers/App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\") as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}