{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Searchbox.js","containers/App.js","redux/actions.js","redux/constants.js","redux/reducer.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","id","name","email","className","style","minWidth","alt","src","CardList","robots","map","user","key","Searchbox","SearchChange","type","placeholder","aria-label","onChange","App","this","props","onRequestRobots","onSearchChange","searchField","isPending","filtered","filter","robot","toLowerCase","includes","overflowY","height","border","Component","connect","searchRobots","requestRobotsReducer","dispatch","event","payload","target","value","fetch","response","json","data","err","requestRobotsAction","intialStateSearch","intialStateRobotsFetch","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.07d8f1fb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\" style={{minWidth:'350px'}}>\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`}></img>\r\n            <div> <h2> {name} </h2>\r\n                <p> {email} </p></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <>\r\n            {\r\n                robots.map((user) => {\r\n                    return <Card\r\n                        key={user.id}\r\n                        id={user.id}\r\n                        name={user.name}\r\n                        email={user.email} />;\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default CardList; ","import React from 'react';\r\n\r\n\r\nconst Searchbox = ({ SearchChange }) => {\r\n    return (\r\n        <>\r\n            <input\r\n                className=\"pa3 ma4 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"Search Robots\"\r\n                aria-label=\"search Robots\"\r\n                onChange={SearchChange}\r\n            ></input>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Searchbox;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\nimport { requestRobotsAction, setSearchField } from '../redux/actions';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobotsReducer.robots,\r\n        isPending: state.requestRobotsReducer.isPending,\r\n        error: state.requestRobotsReducer.error\r\n    };\r\n\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => requestRobotsAction(dispatch)\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n   \r\n    componentDidMount() {\r\n            this.props.onRequestRobots();\r\n    }\r\n\r\n\r\n    render() {\r\n        //Appearntly we can't have const or define variables that aren't functions \r\n        //unless it's under render.\r\n        \r\n        const { onSearchChange, searchField,robots,isPending } = this.props;\r\n        const filtered = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        if (isPending) {\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"ma2 f1 \">RoboFriends</h1>\r\n                    <Searchbox SearchChange={onSearchChange} />\r\n                    <div>\r\n                        <h1 className=\"ma2 f1 \">Loading..</h1>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n\r\n            return (\r\n                <div className=\"tc main\">\r\n                    <h1 className=\"ma2 f1 \">RoboFriends</h1>\r\n                    <Searchbox SearchChange={onSearchChange} />\r\n                    <div style={{ overflowY: 'scroll', height: '500px', border: '2px solid grey' }}>\r\n                        <CardList robots={filtered} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\nCHANGE_SEARCH_FIELD,\r\nREQUEST_ROBOTS_PENDING, \r\nREQUEST_ROBOTS_SUCCESS, \r\nREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\n\r\nexport const requestRobotsAction = (dispatch) => {\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});            //to dispatch the pending action to the reducer as soon as the action is called which would change the isPending state; \r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS , payload:data}))     //to dispatch the RRS with payload data when we get a response\r\n    .catch(err => dispatch({type:REQUEST_ROBOTS_FAILED,payload:err}));    //to catch any errors and dispatch RRF when so;\r\n }","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst intialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\n\r\nexport const searchRobots = (state = intialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\n\r\nconst intialStateRobotsFetch = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\n\r\nexport const requestRobotsReducer = (state = intialStateRobotsFetch, action = {}) => {\r\n    switch (action.type) {\r\n        \r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n\r\n        default:\r\n            return state;   //returns initalStateRobotsFetch to the store.\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\nimport { searchRobots,requestRobotsReducer } from './redux/reducer';\r\nimport {createLogger} from 'redux-logger';\r\n\r\n\r\nconst rootReducer = combineReducers({searchRobots,requestRobotsReducer});\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer,applyMiddleware(logger));\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    < Provider store={store} >\r\n      <App />\r\n    </ Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}